const fs = require('fs')
const pathLib = require('path')

// Assumes the songs are stored at ./public/static/songs
const songsFolder = pathLib.join("public", "static", "songs")
const appFolder = pathLib.join("src", "app")
if (!fs.existsSync(songsFolder) || !fs.existsSync(appFolder)) {
  console.log("Usage: please launch this script from where ./public/static/songs, and ./src/app exists")
  process.exit(1)
}

// When launched, accessible via, say http://localhost/static/songs
const publicFolder = pathLib.join("", "static", "songs")

const outputFile = pathLib.join(appFolder, "songs_generated.ts")
const allSongsJson =  {}

const musicRegex = /#MUSIC:(.*);/
const musicExtensions = ['.mp3', '.ogg']
const smFileExt = ".sm"
const promises = []
function parse(dirPath) {
  for (const f of fs.readdirSync(dirPath, { withFileTypes: true })) {
    const absPath = pathLib.join(dirPath, f.name)
    if (f.isDirectory()) {
      parse(absPath)
      continue
    }

    if (f.isFile() && pathLib.extname(absPath) === smFileExt) {
      const stream = fs.createReadStream(absPath, {encoding: 'utf8'})
      let res = null
      promises.push(new Promise((resolve) => {
        res = resolve
      }))
      stream.on("readable", () => {
        const chunk = stream.read()
        stream.close()
        const match = chunk.match(musicRegex)
        let musicAbsPath = null
        let musicExt = null
        if (match) {
          const musicAbsPath1 = pathLib.join(dirPath, match[1])
          musicExt= pathLib.extname(musicAbsPath1)
          if (fs.existsSync(musicAbsPath1)) {
            musicAbsPath = musicAbsPath1
          }
        }

        // The heuristic is to try finding the audio file with the same name as the .sm file
        if (!musicAbsPath) {
          for (const ext of [musicExt].concat(musicExtensions)) {
            const candidate = absPath.replace(smFileExt, "") + ext
            if (ext && fs.existsSync(candidate)) {
              musicAbsPath = candidate
            }
          }
        }

        if (!musicAbsPath) {
          console.error(`parse: cannot find music file for ${absPath}`)
        }
        const songName = pathLib.basename(dirPath)
        allSongsJson[songName] = {
          id: songName,
          label: songName,
          sm: absPath.replace(songsFolder, publicFolder),
          audio: musicAbsPath ? musicAbsPath.replace(songsFolder, publicFolder) : null,
        }
        res()
      })
    }
  }
}

parse(songsFolder)
Promise.all(promises).then(() => {
  const stream = fs.createWriteStream(outputFile)
  stream.write(`
// This file is auto-generated by findAllSongs.js :)
export const allSongs: {[key: string]: any} = ${JSON.stringify(allSongsJson)}
  `)
  stream.end()
})
